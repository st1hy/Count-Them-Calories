package com.github.st1hy.countthemcalories.database;

import org.greenrobot.greendao.annotation.*;

import com.github.st1hy.countthemcalories.database.DaoSession;
import org.greenrobot.greendao.DaoException;

import java.math.BigDecimal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "INGREDIENTS".
 */
@Entity(active = true, nameInDb = "INGREDIENTS")
public class Ingredient {

    @Id(autoincrement = true)
    @Unique
    @Index
    private Long id;

    @Convert(converter = com.github.st1hy.countthemcalories.database.property.BigDecimalPropertyConverter.class, columnType = String.class)
    @NotNull
    private BigDecimal amount;
    private Long partOfMealId;
    private Long ingredientTypeId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient IngredientDao myDao;

    @ToOne(joinProperty = "partOfMealId")
    private Meal partOfMeal;

    @Generated
    private transient Long partOfMeal__resolvedKey;

    @ToOne(joinProperty = "ingredientTypeId")
    private IngredientTemplate ingredientType;

    @Generated
    private transient Long ingredientType__resolvedKey;

    @Generated
    public Ingredient() {
    }

    public Ingredient(Long id) {
        this.id = id;
    }

    @Generated
    public Ingredient(Long id, BigDecimal amount, Long partOfMealId, Long ingredientTypeId) {
        this.id = id;
        this.amount = amount;
        this.partOfMealId = partOfMealId;
        this.ingredientTypeId = ingredientTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIngredientDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public BigDecimal getAmount() {
        return amount;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAmount(@NotNull BigDecimal amount) {
        this.amount = amount;
    }

    public Long getPartOfMealId() {
        return partOfMealId;
    }

    public void setPartOfMealId(Long partOfMealId) {
        this.partOfMealId = partOfMealId;
    }

    public Long getIngredientTypeId() {
        return ingredientTypeId;
    }

    public void setIngredientTypeId(Long ingredientTypeId) {
        this.ingredientTypeId = ingredientTypeId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Meal getPartOfMeal() {
        Long __key = this.partOfMealId;
        if (partOfMeal__resolvedKey == null || !partOfMeal__resolvedKey.equals(__key)) {
            __throwIfDetached();
            MealDao targetDao = daoSession.getMealDao();
            Meal partOfMealNew = targetDao.load(__key);
            synchronized (this) {
                partOfMeal = partOfMealNew;
            	partOfMeal__resolvedKey = __key;
            }
        }
        return partOfMeal;
    }

    @Generated
    public void setPartOfMeal(Meal partOfMeal) {
        synchronized (this) {
            this.partOfMeal = partOfMeal;
            partOfMealId = partOfMeal == null ? null : partOfMeal.getId();
            partOfMeal__resolvedKey = partOfMealId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public IngredientTemplate getIngredientType() {
        Long __key = this.ingredientTypeId;
        if (ingredientType__resolvedKey == null || !ingredientType__resolvedKey.equals(__key)) {
            __throwIfDetached();
            IngredientTemplateDao targetDao = daoSession.getIngredientTemplateDao();
            IngredientTemplate ingredientTypeNew = targetDao.load(__key);
            synchronized (this) {
                ingredientType = ingredientTypeNew;
            	ingredientType__resolvedKey = __key;
            }
        }
        return ingredientType;
    }

    @Generated
    public void setIngredientType(IngredientTemplate ingredientType) {
        synchronized (this) {
            this.ingredientType = ingredientType;
            ingredientTypeId = ingredientType == null ? null : ingredientType.getId();
            ingredientType__resolvedKey = ingredientTypeId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
